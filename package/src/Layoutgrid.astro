---
import type { LayoutgridProps } from "./types";
import { prepareGridData } from "./utils";

const gridData = prepareGridData(Astro.props as LayoutgridProps);
const {
  mobileColumns,
  tabletColumns,
  desktopColumns,
  tabletBreakpoint,
  desktopBreakpoint,
  gutterArray,
  marginArray,
  gridColor,
  gridOpacity,
  maxWidth,
  showBackground,
} = gridData;
---

<script>
  import type { Breakpoint } from "./types";
  import { createConfig } from "./config";
  import {
    getBreakpoint,
    getBreakpointIndex,
    createGridColumn,
    isGridToggleShortcut,
  } from "./utils";

  class LayoutGrid extends HTMLElement {
    private isVisible = false;
    private gridElement: HTMLElement | null = null;
    private gridContainer: HTMLElement | null = null;
    private gridColumns: HTMLElement | null = null;
    private resizeObserver: ResizeObserver | null = null;
    private currentBreakpoint: Breakpoint = "mobile";
    private get config() {
      return createConfig(this.dataset);
    }

    constructor() {
      super();
      this.handleKeydown = this.handleKeydown.bind(this);
      this.handleResize = this.handleResize.bind(this);
    }

    connectedCallback() {
      this.gridElement = this.querySelector(
        ".layoutgrid-overlay"
      ) as HTMLElement;
      this.gridContainer = this.querySelector(".grid-container") as HTMLElement;
      this.gridColumns = this.querySelector(".grid-columns") as HTMLElement;

      document.addEventListener("keydown", this.handleKeydown);

      if (this.gridContainer) {
        this.gridContainer.style.maxWidth = this.dataset.maxWidth || "100vw";
      }

      this.resizeObserver = new ResizeObserver(this.handleResize);
      this.resizeObserver.observe(document.documentElement);

      this.updateGrid();
      this.hideGrid();
    }

    disconnectedCallback() {
      document.removeEventListener("keydown", this.handleKeydown);
      this.resizeObserver?.disconnect();
    }

    private handleResize() {
      const newBreakpoint = getBreakpoint(
        window.innerWidth,
        this.config.breakpoints.tablet,
        this.config.breakpoints.desktop
      );
      if (newBreakpoint !== this.currentBreakpoint) {
        this.currentBreakpoint = newBreakpoint;
        this.updateGrid();
      }
    }

    private updateGrid() {
      if (!this.gridColumns || !this.gridContainer) return;

      const breakpointIndex = getBreakpointIndex(this.currentBreakpoint);
      const columnCount = this.config.columns[this.currentBreakpoint];
      const gutterValue = this.config.gutter[breakpointIndex];
      const marginValue = this.config.margin[breakpointIndex];

      // Update styles
      this.gridContainer.style.paddingInline = `${marginValue}rem`;
      this.gridColumns.style.gap = `${gutterValue}rem`;
      this.gridColumns.style.gridTemplateColumns = `repeat(${columnCount}, 1fr)`;

      // Create columns
      this.gridColumns.innerHTML = "";
      for (let i = 0; i < columnCount; i++) {
        this.gridColumns.appendChild(
          createGridColumn(
            this.config.gridColor,
            this.config.gridOpacity,
            this.config.showBackground
          )
        );
      }
    }

    private handleKeydown(event: KeyboardEvent) {
      if (isGridToggleShortcut(event)) {
        event.preventDefault();
        this.toggleGrid();
      }
    }

    toggleGrid() {
      this.isVisible = !this.isVisible;
      if (this.gridElement) {
        this.gridElement.style.display = this.isVisible ? "block" : "none";
      }
    }

    hideGrid() {
      this.isVisible = false;
      if (this.gridElement) {
        this.gridElement.style.display = "none";
      }
    }
  }

  customElements.define("layout-grid", LayoutGrid);
</script>

<layout-grid
  data-mobile-columns={mobileColumns}
  data-tablet-columns={tabletColumns}
  data-desktop-columns={desktopColumns}
  data-tablet-breakpoint={tabletBreakpoint}
  data-desktop-breakpoint={desktopBreakpoint}
  data-gutter={JSON.stringify(gutterArray)}
  data-margin={JSON.stringify(marginArray)}
  data-grid-color={gridColor}
  data-grid-opacity={gridOpacity}
  data-show-background={showBackground}
  data-max-width={maxWidth}
>
  <aside
    class="layoutgrid-overlay"
    style={`z-index: 1000;`}
    id="astro-layout-grid"
  >
    <div class="grid-container">
      <div class="grid-columns"></div>
    </div>
  </aside>
</layout-grid>

<style>
  .layoutgrid-overlay {
    position: fixed;
    inset: 0;
    display: none;
    pointer-events: none;
    width: 100vw;
    height: 100vh;
  }

  .grid-container {
    height: 100%;
    margin: 0 auto;
  }

  .grid-columns {
    display: grid;
    height: 100%;
  }
</style>
