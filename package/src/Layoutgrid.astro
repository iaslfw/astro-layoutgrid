---
interface LayoutgridProps {
  columns?: number; // default 12
  tabletColumns?: number;
  mobileColumns?: number;
  gutter?: number | [number, number, number]; // [mobile, tablet, desktop]
  margin?: number | [number, number, number]; // [mobile, tablet, desktop]
  gridColor?: string;
  gridOpacity?: number;
  maxWidth?: string;
  showBackground?: boolean; // default false - if true shows background, if false shows only borders
}

const {
  columns = 12,
  tabletColumns = 8,
  mobileColumns = 4,
  gutter = [0.75, 1, 1],
  margin = [0.75, 1, 1],
  gridColor = "#ff0000",
  gridOpacity = 0.1,
  maxWidth = "100vw",
  showBackground = false,
} = Astro.props as LayoutgridProps;

const gutterArray = Array.isArray(gutter) ? gutter : [gutter, gutter, gutter];
const marginArray = Array.isArray(margin) ? margin : [margin, margin, margin];
---

<script>
  class LayoutGrid extends HTMLElement {
    private isVisible = false;
    private gridElement: HTMLElement | null = null;
    private columnsContainer: HTMLElement | null = null;

    constructor() {
      super();
      this.handleKeydown = this.handleKeydown.bind(this);
    }

    connectedCallback() {
      this.gridElement = this.querySelector(
        "#astro-layout-grid"
      ) as HTMLElement;
      this.columnsContainer = this.querySelector(
        ".layout-grid-columns"
      ) as HTMLElement;

      document.addEventListener("keydown", this.handleKeydown);
      this.createGridColumns();
      this.updateResponsiveMargins();
      this.hideGrid();
      this.updateResponsiveVisibility();

      // Update margins and visibility on resize
      window.addEventListener("resize", () => {
        this.updateResponsiveMargins();
        this.updateResponsiveVisibility();
      });
    }

    disconnectedCallback() {
      document.removeEventListener("keydown", this.handleKeydown);
      window.removeEventListener("resize", () => {
        this.updateResponsiveMargins();
        this.updateResponsiveVisibility();
      });
    }

    updateResponsiveMargins() {
      const container = this.querySelector(".grid-container") as HTMLElement;
      if (!container) return;

      const marginValues = JSON.parse(this.dataset.margin || "[2, 2, 2]");
      const screenWidth = window.innerWidth;

      let marginValue;
      if (screenWidth >= 1024) {
        marginValue = marginValues[2]; // Desktop
      } else if (screenWidth >= 768) {
        marginValue = marginValues[1]; // Tablet
      } else {
        marginValue = marginValues[0]; // Mobile
      }

      container.style.paddingLeft = `${marginValue}rem`;
      container.style.paddingRight = `${marginValue}rem`;
    }

    updateResponsiveVisibility() {
      if (!this.columnsContainer) return;

      const screenWidth = window.innerWidth;
      const containers = this.columnsContainer.querySelectorAll(
        "[data-breakpoint]"
      ) as NodeListOf<HTMLElement>;

      containers.forEach((container) => {
        const breakpoint = container.dataset.breakpoint;

        if (breakpoint === "mobile") {
          container.style.display = screenWidth < 768 ? "grid" : "none";
        } else if (breakpoint === "tablet") {
          container.style.display =
            screenWidth >= 768 && screenWidth < 1024 ? "grid" : "none";
        } else if (breakpoint === "desktop") {
          container.style.display = screenWidth >= 1024 ? "grid" : "none";
        }
      });
    }

    handleKeydown(event: KeyboardEvent) {
      // default 12
      if (
        (event.metaKey || event.ctrlKey) &&
        event.shiftKey &&
        event.code === "KeyG"
      ) {
        event.preventDefault();
        this.toggleGrid();
      }
    }

    createGridColumns() {
      if (!this.columnsContainer) return;

      // default 12
      this.columnsContainer.innerHTML = "";

      // default 12
      const columns = parseInt(this.dataset.columns || "12");
      const tabletColumns = parseInt(this.dataset.tabletColumns || "8");
      const mobileColumns = parseInt(this.dataset.mobileColumns || "4");

      // default 12
      const gutterValues = JSON.parse(this.dataset.gutter || "[1.5, 1.5, 1.5]");
      const marginValues = JSON.parse(this.dataset.margin || "[2, 2, 2]");

      // default 12
      this.createColumnsForBreakpoint(columns, "desktop", gutterValues[2]);
      this.createColumnsForBreakpoint(tabletColumns, "tablet", gutterValues[1]);
      this.createColumnsForBreakpoint(mobileColumns, "mobile", gutterValues[0]);
    }

    createColumnsForBreakpoint(
      columnCount: number,
      breakpoint: string,
      gutterValue: number
    ) {
      if (!this.columnsContainer) return;

      const container = document.createElement("div");
      container.className = `grid-${breakpoint}`;

      // default 12
      container.style.display = "grid";
      container.style.height = "100%";
      container.style.gridTemplateColumns = `repeat(${columnCount}, 1fr)`;
      container.style.gap = gutterValue + "rem";

      // default 12
      if (breakpoint === "mobile") {
        container.style.display = "grid";
        container.dataset.breakpoint = "mobile";
      } else if (breakpoint === "tablet") {
        container.style.display = "none";
        container.dataset.breakpoint = "tablet";
      } else if (breakpoint === "desktop") {
        container.style.display = "none";
        container.dataset.breakpoint = "desktop";
      }

      for (let i = 0; i < columnCount; i++) {
        const column = document.createElement("div");
        const showBackground = this.dataset.showBackground === "true";

        column.style.border = "1px solid";
        column.style.borderColor = this.dataset.gridColor || "#ff0000";
        column.style.boxSizing = "border-box";

        if (showBackground) {
          column.style.backgroundColor = this.dataset.gridColor || "#ff0000";
          column.style.opacity = this.dataset.gridOpacity || "0.1";
        } else {
          column.style.backgroundColor = "transparent";
          column.style.opacity = "1";
        }

        container.appendChild(column);
      }

      this.columnsContainer.appendChild(container);
    }

    toggleGrid() {
      this.isVisible = !this.isVisible;

      if (this.isVisible) {
        this.showGrid();
      } else {
        this.hideGrid();
      }
    }

    showGrid() {
      if (this.gridElement) {
        this.gridElement.style.display = "block";
        console.log("Layout grid: ON");
      }
    }

    hideGrid() {
      if (this.gridElement) {
        this.gridElement.style.display = "none";
        console.log("Layout grid: OFF");
      }
    }
  }

  customElements.define("layout-grid", LayoutGrid);
</script>

<layout-grid
  data-columns={columns}
  data-tablet-columns={tabletColumns}
  data-mobile-columns={mobileColumns}
  data-gutter={JSON.stringify(gutterArray)}
  data-margin={JSON.stringify(marginArray)}
  data-grid-color={gridColor}
  data-grid-opacity={gridOpacity}
  data-max-width={maxWidth}
  data-show-background={showBackground}
>
  <aside id="astro-layout-grid" class="layoutgrid-overlay">
    <div class="grid-container" style={`max-width: ${maxWidth};`}>
      <div class="layout-grid-columns"></div>
    </div>
  </aside>
</layout-grid>

<style>
  .layoutgrid-overlay {
    pointer-events: none;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 9999;
    display: none;
    height: 100vh;
    width: 100vw;
  }

  .grid-container {
    margin-left: auto;
    margin-right: auto;
    height: 100%;
  }

  .layout-grid-columns {
    position: relative;
    height: 100%;
  }
</style>
